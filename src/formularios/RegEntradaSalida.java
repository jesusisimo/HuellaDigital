/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RegEntradaSalida.java
 *
 * Created on 14-nov-2012, 9:20:34
 */
package formularios;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import BD.ConexionBD;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;



/**
 *
 * @author jesus
 */
public class RegEntradaSalida extends javax.swing.JFrame {

    /** Creates new form RegEntradaSalida */
    public RegEntradaSalida() {
        initComponents();
        javax.swing.Timer t = new javax.swing.Timer(1000, new ActionListener() {
        public void actionPerformed(ActionEvent e) {
                    Date fecha = new Date(); //aqui tu fecha;
                    SimpleDateFormat dt = new SimpleDateFormat("dd/MM/yyyy");
                    String fechaa=dt.format(fecha);
                    FechaActual.setText(fechaa);
                    dt = new SimpleDateFormat("hh:mm:ss");
                    String hora=dt.format(fecha);
                    HoraActual.setText(hora);
                  }
               });
                t.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        FechaActual = new javax.swing.JFormattedTextField();
        HoraActual = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        Notificaciones = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblImagenHuella = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(51, 153, 255));
        setForeground(javax.swing.UIManager.getDefaults().getColor("textHighlight"));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SISTEMA DE CONTROL DE ENTRADA DE PERSONAL");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel1.setOpaque(true);

        FechaActual.setBorder(null);
        FechaActual.setEditable(false);
        FechaActual.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        FechaActual.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        FechaActual.setFont(new java.awt.Font("Tahoma", 1, 24));

        HoraActual.setBorder(null);
        HoraActual.setEditable(false);
        HoraActual.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        HoraActual.setFont(new java.awt.Font("Tahoma", 1, 24));
        HoraActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoraActualActionPerformed(evt);
            }
        });

        Notificaciones.setColumns(20);
        Notificaciones.setFont(new java.awt.Font("Segoe UI", 1, 18));
        Notificaciones.setRows(5);
        jScrollPane2.setViewportView(Notificaciones);

        jLabel2.setText("jLabel2");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Announcement.png"))); // NOI18N
        jLabel3.setText("Notificaciones");
        jLabel3.setToolTipText("");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jPanel1.setPreferredSize(new java.awt.Dimension(481, 438));

        jTable1.setBackground(new java.awt.Color(64, 64, 64));
        jTable1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTable1.setFont(new java.awt.Font("Tahoma", 1, 18));
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Fecha", "Hora", "Nombre", "Tipo", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(80);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        lblImagenHuella.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logo.jpg"))); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                        .addGap(529, 529, 529))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(FechaActual, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                                        .addGap(145, 145, 145)
                                        .addComponent(HoraActual, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(lblImagenHuella, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(67, 67, 67))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 597, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 814, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(HoraActual, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                            .addComponent(FechaActual, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblImagenHuella, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HoraActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoraActualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HoraActualActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        Connection c=con.conectar();
        PreparedStatement actualiza_asistencia;
        try {
            actualiza_asistencia = c.prepareStatement("UPDATE personal SET asistencia=false WHERE clave!='00000000';");
             actualiza_asistencia.executeQuery();
        } catch (SQLException ex) {

        }

        Iniciar();
        start();
        //EstadoHuellas();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        stop();
            try {
    //Establece los valores para la sentencia SQL
    Connection c=con.conectar();
    Date fecha=new Date();
                    SimpleDateFormat fech = new SimpleDateFormat("dd/MM/yyyy");//creamos la fecha actual que se guardara en la base de datos
                    String fechaa=fech.format(fecha);
    //Obtiene la plantilla correspondiente a la persona indicada
    PreparedStatement verificarStmt = c.prepareStatement("SELECT asistencia,clave FROM personal");
    ResultSet rs = verificarStmt.executeQuery();

    if (rs.next()==true){//Si se encuentra la clave en la base de datos
    //Lee la plantilla de la base de datos
    
    do{
        String asistencia=rs.getString("asistencia");
        String clave=rs.getString("clave");
        if(asistencia.equals("f")){
        try{
         PreparedStatement insertar = c.prepareStatement("insert into historial(clave_trabajador,fecha,estado) values('"+clave+"','"+fechaa+"','Falta');");
         insertar.executeQuery();   
            }catch (SQLException e) {
    }
        }

    }while(rs.next());

    } else {

    }
    } catch (SQLException e) {
    //Si ocurre un error lo indica en la consola

    }finally{
       con.desconectar();
    }



    }//GEN-LAST:event_formWindowClosing

//Varible que permite iniciar el dispositivo de lector de huella conectado
// con sus distintos metodos.
private DPFPCapture Lector = DPFPGlobal.getCaptureFactory().createCapture();

//Varible que permite establecer las capturas de la huellas, para determina sus caracteristicas
// y poder estimar la creacion de un template de la huella para luego poder guardarla
private DPFPEnrollment Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();

//Esta variable tambien captura una huella del lector y crea sus caracteristcas para auntetificarla
// o verificarla con alguna guardada en la BD
private DPFPVerification Verificador = DPFPGlobal.getVerificationFactory().createVerification();

//Variable que para crear el template de la huella luego de que se hallan creado las caracteriticas
// necesarias de la huella si no ha ocurrido ningun problema
private DPFPTemplate template;
public static String TEMPLATE_PROPERTY = "template";
    /**
    * @param args the command line arguments
    */

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegEntradaSalida().setVisible(true);

                }
        });
    }

protected void Iniciar(){
   Lector.addDataListener(new DPFPDataAdapter() {
    @Override public void dataAcquired(final DPFPDataEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("La Huella Digital ha sido Capturada");
    ProcesarCaptura(e.getSample());
    }});}
   });

   Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
    @Override public void readerConnected(final DPFPReaderStatusEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
    }});}
    @Override public void readerDisconnected(final DPFPReaderStatusEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
    }});}
   });

   Lector.addSensorListener(new DPFPSensorAdapter() {
    @Override public void fingerTouched(final DPFPSensorEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    EnviarTexto("El dedo ha sido colocado sobre el Lector de Huella");
    }});}
    @Override public void fingerGone(final DPFPSensorEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El dedo ha sido quitado del Lector de Huella");
    }});}
   });

   Lector.addErrorListener(new DPFPErrorAdapter(){
    public void errorReader(final DPFPErrorEvent e){
    SwingUtilities.invokeLater(new Runnable() {  public void run() {
    EnviarTexto("Error: "+e.getError());
    }});}
   });
}
    public DPFPFeatureSet featuresinscripcion;
 public DPFPFeatureSet featuresverificacion;
  public  void ProcesarCaptura(DPFPSample sample)
 {
 // Procesar la muestra de la huella y crear un conjunto de características con el propósito de inscripción.
 featuresinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);

 // Procesar la muestra de la huella y crear un conjunto de características con el propósito de verificacion.
 featuresverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);

 // Comprobar la calidad de la muestra de la huella y lo añade a su reclutador si es bueno
 if (featuresinscripcion != null)
     try{
     System.out.println("Las Caracteristicas de la Huella han sido creada");
     Reclutador.addFeatures(featuresinscripcion);// Agregar las caracteristicas de la huella a la plantilla a crear
     // Dibuja la huella dactilar capturada.
     Image image=CrearImagenHuella(sample);
     DibujarHuella(image);
    identificarHuella();
    Reclutador.clear();
    stop();
    start();
     }catch (DPFPImageQualityException ex) {
     System.err.println("Error");
     }
}
 public  DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose){
     DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
     try {
      return extractor.createFeatureSet(sample, purpose);
     } catch (DPFPImageQualityException e) {
      return null;
     }
}
  public  Image CrearImagenHuella(DPFPSample sample) {
	return DPFPGlobal.getSampleConversionFactory().createImage(sample);
}

  public void DibujarHuella(Image image) {
        lblImagenHuella.setIcon(new ImageIcon(
        image.getScaledInstance(lblImagenHuella.getWidth(), lblImagenHuella.getHeight(), Image.SCALE_DEFAULT)));
        repaint();
 }
 public void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
	this.template = template;
	firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }
public void EnviarTexto(String string) {
        Notificaciones.setText(string + "\n");
}

public  void stop(){
        Lector.stopCapture();
}
    public DPFPTemplate getTemplate() {
        return template;
    }
public  void start(){
	Lector.startCapture();
	//EnviarTexto("Utilizando el Lector de Huella Dactilar ");
}
ConexionBD con=new ConexionBD();
 /**
  * Identifica a una persona registrada por medio de su huella digital
  */
  public void identificarHuella(){
     try {
       //Establece los valores para la sentencia SQL
       Connection c=con.conectar();
       //Obtiene todas las huellas de la bd
       PreparedStatement identificarStmt = c.prepareStatement("SELECT nombre,huella,clave FROM personal");
       ResultSet rs = identificarStmt.executeQuery();
       //Si se encuentra el nombre en la base de datos
       while(rs.next()){
       //Lee la plantilla de la base de datos
       byte templateBuffer[] = rs.getBytes("huella");
       String nombre=rs.getString("nombre");
       String clave=rs.getString("clave");
       //Crea una nueva plantilla a partir de la guardada en la base de datos
       DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
       //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
       setTemplate(referenceTemplate);
       // Compara las caracteriticas de la huella recientemente capturda con la
       // alguna plantilla guardada en la base de datos que coincide con ese tipo
       DPFPVerificationResult result = Verificador.verify(featuresverificacion, getTemplate());
       //compara las plantilas (actual vs bd)
       //Si encuentra correspondencia dibuja el mapa
       //e indica el nombre de la persona que coincidió.
       if (result.isVerified()){
       
                    Date fecha = new Date(); //aqui tu fecha;
                    SimpleDateFormat dt = new SimpleDateFormat("dd/MM/yyyy");
                    String fechaa=dt.format(fecha);
                    jTable1.setValueAt( fechaa ,0 ,0);
                    dt = new SimpleDateFormat("hh:mm:ss");
                    String hora=dt.format(fecha);
                    jTable1.setValueAt( hora ,0 ,1);
                    jTable1.setValueAt( nombre ,0 ,2);
                    consultaES(clave);
        
       return;
       }
       }
       //Si no encuentra alguna huella correspondiente al nombre lo indica con un mensaje
       Notificaciones.setText("No existe un registro que coincida con la huella actual\n"
               + "Repita la operacion, revise que su huella no este maltratada");
       jTable1.setValueAt( "---" ,0 ,0);
       jTable1.setValueAt( "---" ,0 ,1);
       jTable1.setValueAt( "---" ,0 ,2);
       jTable1.setValueAt( "---" ,0 ,3);
       jTable1.setValueAt( "---" ,0 ,4);
       setTemplate(null);
       } catch (SQLException e) {
       //Si ocurre un error lo indica en la consola
       //System.err.println("Error al identificar huella dactilar."+e.getMessage());
       }finally{
       con.desconectar();
       }
   }
 public void consultaES(String clave){
     Connection ch=con.conectar();
     int hactual,hbase,mactual,mbase;   
     String hora1=null;
     Date dias = new Date(); //consultamos en que dia nos encontramos;
     SimpleDateFormat dtdia=new SimpleDateFormat("EEEE");
     String fechaaa=dtdia.format(dias);
     String diain="e"+fechaaa;//modificamoes esta parte
     String diaout="s"+fechaaa;
     //------------------------------------------------------------
     try {
                PreparedStatement consultah = ch.prepareStatement("SELECT *FROM horario where clave_trabajador=?");
                consultah.setString(1,clave);
                ResultSet res = consultah.executeQuery();
                while (res.next()) {
                //si se encuentran datos lo insertamos en la tabla
                    String edia=res.getString(diain);//extraemos la hora de entrada
                    String sdia=res.getString(diaout);

                    Date hora=new Date();//creamos la hora actual
                    SimpleDateFormat dt = new SimpleDateFormat("HH:mm");
                    String horatabla=edia;
                try {
                    Date htabla = dt.parse(horatabla);
                } catch (ParseException ex) {
                    Logger.getLogger(RegEntradaSalida.class.getName()).log(Level.SEVERE, null, ex);
                }
                    Date htabla;
                try {
                    htabla = dt.parse(horatabla);
                    hora1=dt.format(htabla);
                    //System.err.println(hora1);//conversion a tipo date de la horas de entrada en el horario
                } catch (ParseException ex) {
                    Logger.getLogger(RegEntradaSalida.class.getName()).log(Level.SEVERE, null, ex);
                }
                    String hora2=dt.format(hora);//hora actual de entrada
                    
                    //convertir las horas a entero para compararlas

                    hactual=Integer.parseInt(hora2.substring(0, 2));
                    hbase=Integer.parseInt(hora1.substring(0, 2));

                    mactual=Integer.parseInt(hora2.substring(3, 5));
                    mbase=Integer.parseInt(hora1.substring(3, 5));

                    //System.err.println(hactual+" "+hbase+" minutos "+mactual+" "+mbase);
                    int horaminutos_entrada=(hbase*60)+mbase,horaminutos_actual=(hactual*60)+mactual;//convertimos todo a minutos para que sea facil la comparacion
                    //System.err.println("minutos actual "+horaminutos_actual);
                    //System.err.println("minutos entrada "+horaminutos_entrada);
                    Date fecha=new Date();
                    SimpleDateFormat fech = new SimpleDateFormat("dd/MM/yyyy");//creamos la fecha actual que se guardara en la base de datos
                    String fechaa=fech.format(fecha);

                    if(horaminutos_entrada<horaminutos_actual){//si tiempo de entrada es menor que tiempo actual
                    jTable1.setValueAt( "Entrada",0 ,3);//retardo
                    jTable1.setValueAt( "Retardo" ,0 ,4);
                    Notificaciones.setText("Asistencia registrada\n"
                            + "Procure llegar mas temprano");
                    PreparedStatement insertar = ch.prepareStatement("insert into historial(clave_trabajador,fecha,estado) values('"+clave+"','"+fechaa+"','Retardo');");
                    insertar.executeQuery();
                     
                    

                                   }
                    else{
                    jTable1.setValueAt( "Entrada",0 ,3);
                    jTable1.setValueAt( "Normal" ,0 ,4);
                    Notificaciones.setText("Asistencia registrada\n");
                    PreparedStatement insertar = ch.prepareStatement("insert into historial(clave_trabajador,fecha,estado) values('"+clave+"','"+fechaa+"','Normal');");
                    insertar.executeQuery();
                                        }
                     }
            } catch (SQLException ex) {
                PreparedStatement actualiza_asistencia;
            try {
                actualiza_asistencia = ch.prepareStatement("UPDATE personal SET asistencia=true WHERE clave='" + clave + "';");
                actualiza_asistencia.executeQuery();
            } catch (SQLException ex1) {
                //Logger.getLogger(RegEntradaSalida.class.getName()).log(Level.SEVERE, null, ex1);
            }             
            }
     //----------------------------------------------------------------
  con.desconectar();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField FechaActual;
    private javax.swing.JFormattedTextField HoraActual;
    private javax.swing.JTextArea Notificaciones;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblImagenHuella;
    // End of variables declaration//GEN-END:variables

}
